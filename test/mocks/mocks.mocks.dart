// Mocks generated by Mockito 5.4.5 from annotations
// in guiago/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i13;

import 'package:guiago/core/domain/motel.dart' as _i10;
import 'package:guiago/core/repositories/repository.dart' as _i9;
import 'package:guiago/core/services/api_service.dart' as _i2;
import 'package:guiago/data/datasource/local.dart' as _i6;
import 'package:guiago/data/datasource/remote.dart' as _i5;
import 'package:guiago/data/dto/response.dart' as _i3;
import 'package:guiago/data/interfaces/local_storage.dart' as _i4;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAPIService_0 extends _i1.SmartFake implements _i2.APIService {
  _FakeAPIService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocalStorage_2 extends _i1.SmartFake implements _i4.LocalStorage {
  _FakeLocalStorage_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRemoteDataSource_3 extends _i1.SmartFake
    implements _i5.RemoteDataSource {
  _FakeRemoteDataSource_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocalDataSource_4 extends _i1.SmartFake
    implements _i6.LocalDataSource {
  _FakeLocalDataSource_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_5 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i5.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.APIService get apiService =>
      (super.noSuchMethod(
            Invocation.getter(#apiService),
            returnValue: _FakeAPIService_0(
              this,
              Invocation.getter(#apiService),
            ),
          )
          as _i2.APIService);

  @override
  _i8.Future<_i3.Response> getData() =>
      (super.noSuchMethod(
            Invocation.method(#getData, []),
            returnValue: _i8.Future<_i3.Response>.value(
              _FakeResponse_1(this, Invocation.method(#getData, [])),
            ),
          )
          as _i8.Future<_i3.Response>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i6.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LocalStorage get localStorage =>
      (super.noSuchMethod(
            Invocation.getter(#localStorage),
            returnValue: _FakeLocalStorage_2(
              this,
              Invocation.getter(#localStorage),
            ),
          )
          as _i4.LocalStorage);

  @override
  _i8.Future<_i3.Response> getData() =>
      (super.noSuchMethod(
            Invocation.method(#getData, []),
            returnValue: _i8.Future<_i3.Response>.value(
              _FakeResponse_1(this, Invocation.method(#getData, [])),
            ),
          )
          as _i8.Future<_i3.Response>);

  @override
  _i8.Future<void> saveData(_i3.Response? response) =>
      (super.noSuchMethod(
            Invocation.method(#saveData, [response]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i9.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RemoteDataSource get remoteDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#remoteDataSource),
            returnValue: _FakeRemoteDataSource_3(
              this,
              Invocation.getter(#remoteDataSource),
            ),
          )
          as _i5.RemoteDataSource);

  @override
  _i6.LocalDataSource get localDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#localDataSource),
            returnValue: _FakeLocalDataSource_4(
              this,
              Invocation.getter(#localDataSource),
            ),
          )
          as _i6.LocalDataSource);

  @override
  _i8.Future<List<_i10.Motel>> getMotelList(bool? hasInternet) =>
      (super.noSuchMethod(
            Invocation.method(#getMotelList, [hasInternet]),
            returnValue: _i8.Future<List<_i10.Motel>>.value(<_i10.Motel>[]),
          )
          as _i8.Future<List<_i10.Motel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i7.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i8.Future<_i7.Response>.value(
              _FakeResponse_5(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i8.Future<_i7.Response>.value(
              _FakeResponse_5(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i8.Future<_i7.Response>.value(
              _FakeResponse_5(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i8.Future<_i7.Response>.value(
              _FakeResponse_5(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i8.Future<_i7.Response>.value(
              _FakeResponse_5(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i8.Future<_i7.Response>.value(
              _FakeResponse_5(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i8.Future<_i7.Response>);

  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i8.Future<String>.value(
              _i12.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<_i13.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i8.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
          )
          as _i8.Future<_i13.Uint8List>);

  @override
  _i8.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i8.Future<_i7.StreamedResponse>.value(
              _FakeStreamedResponse_6(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i8.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}
